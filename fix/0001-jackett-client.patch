*** /dev/null
--- a/apps/services/jackett/client.py
@@
+import httpx
+from typing import Any, Dict, List
+
+class JackettClient:
+    def __init__(self, base_url: str, api_key: str, timeout: float = 10.0):
+        self.base = base_url.rstrip("/")
+        self.key = api_key
+        self.timeout = timeout
+        self.headers = {
+            "Accept": "application/json",
+            # Jackett understands both header and query param
+            "X-Api-Key": self.key,
+        }
+
+    async def _get(self, path: str, **params):
+        params = {"apikey": self.key, **(params or {})}
+        url = f"{self.base}{path}"
+        async with httpx.AsyncClient(timeout=self.timeout, follow_redirects=False) as s:
+            r = await s.get(url, headers=self.headers, params=params)
+        if r.status_code in (301, 302, 303, 307, 308):
+            raise RuntimeError(f"Jackett requires auth (got {r.status_code} redirect to login)")
+        r.raise_for_status()
+        return r
+
+    async def list_indexers(self) -> List[Dict[str, Any]]:
+        r = await self._get("/api/v2.0/indexers")
+        return r.json()
+
+    async def test_indexer(self, slug: str) -> Dict[str, Any]:
+        r = await self._get(f"/api/v2.0/indexers/{slug}/results", take=1)
+        return r.json()
