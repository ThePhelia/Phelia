--- a/apps/api/v1/routes/trackers.py
+++ b/apps/api/v1/routes/trackers.py
@@
-from fastapi import APIRouter, Depends, HTTPException
+from fastapi import APIRouter, Depends, HTTPException
+from apps.api.deps import get_jackett
+from apps.services.jackett.client import JackettClient
@@
-@router.get("/providers")
-async def providers():
-    # TODO: was temporary â€” returned static list
-    return [
-        {"slug": "rutracker", "name": "RuTracker", "type": "private", "requiresCredentials": True, "fields": ["username","password"]},
-        {"slug": "rarbg", "name": "RARBG", "type": "public", "requiresCredentials": False, "fields": []},
-    ]
+@router.get("/providers")
+async def providers(j: JackettClient = Depends(get_jackett)):
+    try:
+        idxs = await j.list_indexers()
+    except Exception as e:
+        raise HTTPException(status_code=502, detail=f"jackett: {e}")
+
+    out = []
+    for i in idxs:
+        slug = i.get("id") or i.get("indexer") or i.get("slug")
+        name = i.get("name") or slug
+        is_private = bool(i.get("isPrivate"))
+        requires = bool(i.get("supportsCredentials") or is_private)
+        fields = i.get("requiredFields") or []
+        out.append({
+            "slug": slug,
+            "name": name,
+            "type": "private" if is_private else "public",
+            "requiresCredentials": requires,
+            "fields": fields,
+        })
+    return out
