From 114d42f983710056e891313125dab24745146dfd Mon Sep 17 00:00:00 2001
From: ChatGPT Patch Bot <patchbot@example.com>
Date: Mon, 15 Sep 2025 13:10:32 +0000
Subject: [PATCH] feat(jackett): send X-Api-Key + ?apikey, disable redirects,
 add helpful logging & 302 hint

---
 apps/api/app/services/jackett.py | 70 +++++++++++++++++++++++---------
 1 file changed, 50 insertions(+), 20 deletions(-)

diff --git a/apps/api/app/services/jackett.py b/apps/api/app/services/jackett.py
index 22ea459..9074b7b 100644
--- a/apps/api/app/services/jackett.py
+++ b/apps/api/app/services/jackett.py
@@ -1,6 +1,9 @@
 import httpx
+import logging
 from typing import List, Dict, Any
 
+logger = logging.getLogger(__name__)
+
 class JackettClient:
 
     def _ensure_json(self, r: httpx.Response):
@@ -16,30 +19,57 @@ class JackettClient:
     def __init__(self, base_url: str, api_key: str):
         self.base_url = base_url.rstrip("/")
         self.api_key = api_key
-        self._c = httpx.AsyncClient(timeout=15, headers={"Accept": "application/json"})
+        self._c = httpx.AsyncClient(timeout=15, headers={"Accept": "application/json"}, follow_redirects=False)
 
     
+    
     async def list_indexers(self) -> List[Dict[str, Any]]:
-        # Prefer official endpoint with header auth; fallback to /all if needed.
         headers = {"X-Api-Key": self.api_key, "Accept": "application/json"}
-        url1 = f"{self.base_url}/api/v2.0/indexers"
-        r = await self._c.get(url1, headers=headers, params={"configured": "true"})
-        if r.status_code == 405 or r.status_code == 404:
-            # Some builds expose only /all
-            url2 = f"{self.base_url}/api/v2.0/indexers/all"
-            r = await self._c.get(url2, headers=headers, params={"configured": "true"})
-        r.raise_for_status()
-        data = self._ensure_json(r)
-        out: List[Dict[str, Any]] = []
-        for it in data:
-            out.append({
-                "id": it.get("id") or it.get("name"),
-                "name": it.get("name"),
-                "configured": bool(it.get("configured", False)),
-                "public": bool(it.get("type") == "public" or it.get("privacy") == "public"),
-                "caps": it.get("caps", {}),
-            })
-        return out
+        params = {"configured": "true", "apikey": self.api_key}
+        urls = [
+            f"{self.base_url}/api/v2.0/indexers",
+            f"{self.base_url}/api/v2.0/indexers/all",
+        ]
+        last_exc = None
+        for url in urls:
+            r = await self._c.get(url, headers=headers, params=params)
+            if r.status_code == 302:
+                loc = r.headers.get("Location")
+                ct = r.headers.get("Content-Type", "")
+                logger.warning("Jackett 302 on %s -> %s (CT=%s)", url, loc, ct)
+                # Explicitly raise helpful message
+                raise httpx.HTTPStatusError(
+                    f"Jackett returned 302 (redirect to {loc}). Check API key and Authentication settings in Jackett UI.",
+                    request=r.request,
+                    response=r
+                )
+            if r.status_code >= 400:
+                logger.warning("Jackett %s %s -> %s CT=%s", r.request.method, r.request.url, r.status_code, r.headers.get("Content-Type", ""))
+                last_exc = httpx.HTTPStatusError(
+                    f"Jackett error {r.status_code} on {url}.",
+                    request=r.request,
+                    response=r
+                )
+                continue
+            try:
+                data = self._ensure_json(r)
+                out: List[Dict[str, Any]] = []
+                for it in data:
+                    out.append({
+                        "id": it.get("id") or it.get("name"),
+                        "name": it.get("name"),
+                        "configured": bool(it.get("configured", False)),
+                        "public": bool(it.get("type") == "public" or it.get("privacy") == "public"),
+                        "caps": it.get("caps", {}),
+                    })
+                return out
+            except Exception as e:
+                last_exc = e
+                logger.exception("Failed to parse Jackett response from %s", url)
+                continue
+        if last_exc:
+            raise last_exc
+        return []
 
     async def set_indexer_credentials(self, idx_id: str, payload: Dict[str, Any]) -> None:
         r = await self._c.post(
-- 
2.39.2

